// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dtl6452007meter.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dtl645_2007UpdateRequest struct {
	Devid                string   `protobuf:"bytes,1,opt,name=devid,proto3" json:"devid,omitempty"`
	Devtype              string   `protobuf:"bytes,2,opt,name=devtype,proto3" json:"devtype,omitempty"`
	Devaddr              string   `protobuf:"bytes,3,opt,name=devaddr,proto3" json:"devaddr,omitempty"`
	Commif               string   `protobuf:"bytes,4,opt,name=commif,proto3" json:"commif,omitempty"`
	BaudRate             uint32   `protobuf:"varint,5,opt,name=baudRate,proto3" json:"baudRate,omitempty"`
	DataBits             uint32   `protobuf:"varint,6,opt,name=dataBits,proto3" json:"dataBits,omitempty"`
	StopBits             uint32   `protobuf:"varint,7,opt,name=stopBits,proto3" json:"stopBits,omitempty"`
	Parity               string   `protobuf:"bytes,8,opt,name=parity,proto3" json:"parity,omitempty"`
	Dname                string   `protobuf:"bytes,9,opt,name=dname,proto3" json:"dname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dtl645_2007UpdateRequest) Reset()         { *m = Dtl645_2007UpdateRequest{} }
func (m *Dtl645_2007UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*Dtl645_2007UpdateRequest) ProtoMessage()    {}
func (*Dtl645_2007UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtl6452007meter_d67b1def773bbf49, []int{0}
}
func (m *Dtl645_2007UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dtl645_2007UpdateRequest.Unmarshal(m, b)
}
func (m *Dtl645_2007UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dtl645_2007UpdateRequest.Marshal(b, m, deterministic)
}
func (dst *Dtl645_2007UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dtl645_2007UpdateRequest.Merge(dst, src)
}
func (m *Dtl645_2007UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_Dtl645_2007UpdateRequest.Size(m)
}
func (m *Dtl645_2007UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Dtl645_2007UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Dtl645_2007UpdateRequest proto.InternalMessageInfo

func (m *Dtl645_2007UpdateRequest) GetDevid() string {
	if m != nil {
		return m.Devid
	}
	return ""
}

func (m *Dtl645_2007UpdateRequest) GetDevtype() string {
	if m != nil {
		return m.Devtype
	}
	return ""
}

func (m *Dtl645_2007UpdateRequest) GetDevaddr() string {
	if m != nil {
		return m.Devaddr
	}
	return ""
}

func (m *Dtl645_2007UpdateRequest) GetCommif() string {
	if m != nil {
		return m.Commif
	}
	return ""
}

func (m *Dtl645_2007UpdateRequest) GetBaudRate() uint32 {
	if m != nil {
		return m.BaudRate
	}
	return 0
}

func (m *Dtl645_2007UpdateRequest) GetDataBits() uint32 {
	if m != nil {
		return m.DataBits
	}
	return 0
}

func (m *Dtl645_2007UpdateRequest) GetStopBits() uint32 {
	if m != nil {
		return m.StopBits
	}
	return 0
}

func (m *Dtl645_2007UpdateRequest) GetParity() string {
	if m != nil {
		return m.Parity
	}
	return ""
}

func (m *Dtl645_2007UpdateRequest) GetDname() string {
	if m != nil {
		return m.Dname
	}
	return ""
}

type Dtl645_2007UpdateResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dtl645_2007UpdateResponse) Reset()         { *m = Dtl645_2007UpdateResponse{} }
func (m *Dtl645_2007UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*Dtl645_2007UpdateResponse) ProtoMessage()    {}
func (*Dtl645_2007UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dtl6452007meter_d67b1def773bbf49, []int{1}
}
func (m *Dtl645_2007UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dtl645_2007UpdateResponse.Unmarshal(m, b)
}
func (m *Dtl645_2007UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dtl645_2007UpdateResponse.Marshal(b, m, deterministic)
}
func (dst *Dtl645_2007UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dtl645_2007UpdateResponse.Merge(dst, src)
}
func (m *Dtl645_2007UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_Dtl645_2007UpdateResponse.Size(m)
}
func (m *Dtl645_2007UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Dtl645_2007UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Dtl645_2007UpdateResponse proto.InternalMessageInfo

func (m *Dtl645_2007UpdateResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Dtl645_2007UpdateRequest)(nil), "api.Dtl645_2007UpdateRequest")
	proto.RegisterType((*Dtl645_2007UpdateResponse)(nil), "api.Dtl645_2007UpdateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DLT645_2007Client is the client API for DLT645_2007 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DLT645_2007Client interface {
	// 添加或更新DLT645-2007标准协议表具设备
	Dtl645_2007Update(ctx context.Context, in *Dtl645_2007UpdateRequest, opts ...grpc.CallOption) (*Dtl645_2007UpdateResponse, error)
}

type dLT645_2007Client struct {
	cc *grpc.ClientConn
}

func NewDLT645_2007Client(cc *grpc.ClientConn) DLT645_2007Client {
	return &dLT645_2007Client{cc}
}

func (c *dLT645_2007Client) Dtl645_2007Update(ctx context.Context, in *Dtl645_2007UpdateRequest, opts ...grpc.CallOption) (*Dtl645_2007UpdateResponse, error) {
	out := new(Dtl645_2007UpdateResponse)
	err := c.cc.Invoke(ctx, "/api.DLT645_2007/Dtl645_2007Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DLT645_2007Server is the server API for DLT645_2007 service.
type DLT645_2007Server interface {
	// 添加或更新DLT645-2007标准协议表具设备
	Dtl645_2007Update(context.Context, *Dtl645_2007UpdateRequest) (*Dtl645_2007UpdateResponse, error)
}

func RegisterDLT645_2007Server(s *grpc.Server, srv DLT645_2007Server) {
	s.RegisterService(&_DLT645_2007_serviceDesc, srv)
}

func _DLT645_2007_Dtl645_2007Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dtl645_2007UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DLT645_2007Server).Dtl645_2007Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DLT645_2007/Dtl645_2007Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DLT645_2007Server).Dtl645_2007Update(ctx, req.(*Dtl645_2007UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DLT645_2007_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DLT645_2007",
	HandlerType: (*DLT645_2007Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dtl645_2007Update",
			Handler:    _DLT645_2007_Dtl645_2007Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dtl6452007meter.proto",
}

func init() {
	proto.RegisterFile("dtl6452007meter.proto", fileDescriptor_dtl6452007meter_d67b1def773bbf49)
}

var fileDescriptor_dtl6452007meter_d67b1def773bbf49 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0x3b, 0x31,
	0x10, 0xc7, 0x49, 0xfb, 0xeb, 0xbf, 0xfc, 0xf0, 0x60, 0x50, 0x89, 0x8b, 0x4a, 0x29, 0x08, 0xa5,
	0x87, 0xb6, 0xb4, 0xfe, 0x01, 0x8f, 0xd2, 0xa3, 0xa7, 0x45, 0xcf, 0xcb, 0xd4, 0xc4, 0x12, 0xd8,
	0xdd, 0xc4, 0xcd, 0x6c, 0xa1, 0x57, 0xf1, 0x0d, 0xf4, 0xcd, 0x7c, 0x05, 0x9f, 0x43, 0x24, 0xc9,
	0x6e, 0x3d, 0x68, 0x8f, 0x9f, 0x7c, 0xf2, 0x9d, 0x61, 0x66, 0xe8, 0xa1, 0xc0, 0xf4, 0xea, 0xe2,
	0x72, 0x36, 0x9d, 0x5e, 0x67, 0x12, 0x65, 0x31, 0x36, 0x85, 0x46, 0xcd, 0x9a, 0x60, 0x54, 0x74,
	0xb2, 0xd2, 0x7a, 0x95, 0xca, 0x09, 0x18, 0x35, 0x81, 0x3c, 0xd7, 0x08, 0xa8, 0x74, 0x6e, 0xc3,
	0x97, 0xc1, 0x17, 0xa1, 0x7c, 0xe1, 0xc3, 0x89, 0x4b, 0x3f, 0x18, 0x01, 0x28, 0x63, 0xf9, 0x5c,
	0x4a, 0x8b, 0xec, 0x80, 0xb6, 0x84, 0x5c, 0x2b, 0xc1, 0x49, 0x9f, 0x0c, 0x7b, 0x71, 0x00, 0xc6,
	0x69, 0x47, 0xc8, 0x35, 0x6e, 0x8c, 0xe4, 0x0d, 0xff, 0x5e, 0x63, 0x65, 0x40, 0x88, 0x82, 0x37,
	0xb7, 0xc6, 0x21, 0x3b, 0xa2, 0xed, 0x47, 0x9d, 0x65, 0xea, 0x89, 0xff, 0xf3, 0xa2, 0x22, 0x16,
	0xd1, 0xee, 0x12, 0x4a, 0x11, 0x03, 0x4a, 0xde, 0xea, 0x93, 0xe1, 0x5e, 0xbc, 0x65, 0xe7, 0x04,
	0x20, 0xdc, 0x2a, 0xb4, 0xbc, 0x1d, 0x5c, 0xcd, 0xce, 0x59, 0xd4, 0xc6, 0xbb, 0x4e, 0x70, 0x35,
	0xbb, 0x5e, 0x06, 0x0a, 0x85, 0x1b, 0xde, 0x0d, 0xbd, 0x02, 0xf9, 0x69, 0x72, 0xc8, 0x24, 0xef,
	0x55, 0xd3, 0x38, 0x18, 0xcc, 0xe9, 0xf1, 0x1f, 0xf3, 0x5b, 0xa3, 0x73, 0x2b, 0x5d, 0xa9, 0x58,
	0xda, 0x32, 0xc5, 0x6a, 0x03, 0x15, 0xcd, 0xde, 0x09, 0xfd, 0xbf, 0xb8, 0xbb, 0xaf, 0x53, 0xec,
	0x95, 0xd0, 0xfd, 0x5f, 0x55, 0xd8, 0xe9, 0x18, 0x8c, 0x1a, 0xef, 0xda, 0x6e, 0x74, 0xb6, 0x4b,
	0x87, 0xe6, 0x83, 0xe9, 0xcb, 0xc7, 0xe7, 0x5b, 0x63, 0x14, 0x9d, 0xfb, 0xd3, 0xf9, 0xbb, 0x26,
	0xe2, 0xe7, 0x77, 0x02, 0x42, 0x24, 0xba, 0x48, 0x4a, 0xe3, 0x63, 0x37, 0x64, 0xb4, 0x6c, 0xfb,
	0x9b, 0xce, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x99, 0xce, 0xea, 0xc5, 0x0f, 0x02, 0x00, 0x00,
}
